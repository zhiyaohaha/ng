import { ElementRef, OnDestroy, EventEmitter, NgZone } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { ScriptService } from './script.service';
import { UEditorConfig } from './ueditor.config';
export declare type EventTypes = 'destroy' | 'reset' | 'focus' | 'langReady' | 'beforeExecCommand' | 'afterExecCommand' | 'firstBeforeExecCommand' | 'beforeGetContent' | 'afterGetContent' | 'getAllHtml' | 'beforeSetContent' | 'afterSetContent' | 'selectionchange' | 'beforeSelectionChange' | 'afterSelectionChange';
export declare class UEditorComponent implements OnDestroy, ControlValueAccessor {
    private el;
    private zone;
    private ss;
    private defConfig;
    static idPool: number;
    private instance;
    private value;
    private path;
    private events;
    loading: boolean;
    id: string;
    config: any;
    loadingTip: string;
    host: ElementRef;
    onPreReady: EventEmitter<UEditorComponent>;
    onReady: EventEmitter<UEditorComponent>;
    onDestroy: EventEmitter<{}>;
    onContentChange: EventEmitter<{}>;
    constructor(el: ElementRef, zone: NgZone, ss: ScriptService, defConfig: UEditorConfig);
    ngOnInit(): void;
    private init(options?);
    private updateValue(value);
    private destroy();
    /**
     * 获取UE实例
     *
     * @readonly
     */
    readonly Instance: any;
    /**
     * 设置编辑器语言
     *
     * @param {('zh-cn' | 'en')} lang
     */
    setLanguage(lang: 'zh-cn' | 'en'): void;
    /**
     * 添加编辑器事件
     */
    addListener(eventName: EventTypes, fn: Function): void;
    /**
     * 移除编辑器事件
     */
    removeListener(eventName: EventTypes): void;
    ngOnDestroy(): void;
    writeValue(value: string): void;
    protected onChange: any;
    protected onTouched: any;
    registerOnChange(fn: (_: any) => {}): void;
    registerOnTouched(fn: () => {}): void;
    setDisabledState(isDisabled: boolean): void;
}

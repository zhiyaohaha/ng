import { Component, Input, forwardRef, ViewChild, ElementRef, EventEmitter, Output, NgZone, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { ScriptService } from './script.service';
import { UEditorConfig } from './ueditor.config';
var UEditorComponent = (function () {
    function UEditorComponent(el, zone, ss, defConfig) {
        this.el = el;
        this.zone = zone;
        this.ss = ss;
        this.defConfig = defConfig;
        this.events = {};
        this.loading = true;
        this.loadingTip = '加载中...';
        this.onPreReady = new EventEmitter();
        this.onReady = new EventEmitter();
        this.onDestroy = new EventEmitter();
        this.onContentChange = new EventEmitter();
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
    }
    UEditorComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.path = this.defConfig && this.defConfig.path;
        if (!this.path)
            this.path = './assets/ueditor/';
        // 构建一个虚拟id
        this.id = 'ueditor-' + ++UEditorComponent.idPool;
        this.host.nativeElement.id = this.id;
        // 已经存在对象无须进入懒加载模式
        if (window.UE) {
            this.init();
            return;
        }
        this.ss.load(this.path, true).getChangeEmitter().subscribe(function (res) {
            _this.init();
        });
    };
    UEditorComponent.prototype.init = function (options) {
        var _this = this;
        if (!window.UE)
            throw new Error('uedito js文件加载失败');
        if (this.instance)
            return;
        // registrer hook
        if (this.defConfig && this.defConfig.hook) {
            if (!this.defConfig._hook_finished) {
                this.defConfig._hook_finished = true;
                this.defConfig.hook(UE);
            }
        }
        this.loading = false;
        this.onPreReady.emit(this);
        this.zone.runOutsideAngular(function () {
            var opt = Object.assign({
                UEDITOR_HOME_URL: _this.path
            }, _this.defConfig && _this.defConfig.options, _this.config, options);
            var ueditor = UE.getEditor(_this.id, opt);
            ueditor.ready(function () {
                _this.zone.run(function () {
                    _this.instance = ueditor;
                    _this.value && _this.instance.setContent(_this.value);
                    _this.onReady.emit(_this);
                });
            });
            ueditor.addListener('contentChange', function () {
                _this.updateValue(ueditor.getContent());
            });
        });
    };
    UEditorComponent.prototype.updateValue = function (value) {
        var _this = this;
        this.zone.run(function () {
            _this.value = value;
            _this.onChange(_this.value);
            _this.onTouched(_this.value);
            _this.onContentChange.emit(_this.value);
        });
    };
    UEditorComponent.prototype.destroy = function () {
        if (this.instance) {
            for (var _i = 0, _a = this.events; _i < _a.length; _i++) {
                var ki = _a[_i];
                this.instance.removeListener(ki, this.events[ki]);
            }
            this.instance.removeListener('ready');
            this.instance.removeListener('contentChange');
            this.instance.destroy();
            this.instance = null;
        }
        this.onDestroy.emit();
    };
    Object.defineProperty(UEditorComponent.prototype, "Instance", {
        /**
         * 获取UE实例
         *
         * @readonly
         */
        get: /**
             * 获取UE实例
             *
             * @readonly
             */
        function () {
            return this.instance;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 设置编辑器语言
     *
     * @param {('zh-cn' | 'en')} lang
     */
    /**
         * 设置编辑器语言
         *
         * @param {('zh-cn' | 'en')} lang
         */
    UEditorComponent.prototype.setLanguage = /**
         * 设置编辑器语言
         *
         * @param {('zh-cn' | 'en')} lang
         */
    function (lang) {
        var _this = this;
        this.ss.loadScript(this.path + "/lang/" + lang + "/" + lang + ".js").then(function (res) {
            _this.destroy();
            //清空语言
            if (!UE._bak_I18N) {
                UE._bak_I18N = UE.I18N;
            }
            UE.I18N = {};
            UE.I18N[lang] = UE._bak_I18N[lang];
            _this.init();
        });
    };
    /**
     * 添加编辑器事件
     */
    /**
         * 添加编辑器事件
         */
    UEditorComponent.prototype.addListener = /**
         * 添加编辑器事件
         */
    function (eventName, fn) {
        if (this.events[eventName])
            return;
        this.events[eventName] = fn;
        this.instance.addListener(eventName, fn);
    };
    /**
     * 移除编辑器事件
     */
    /**
         * 移除编辑器事件
         */
    UEditorComponent.prototype.removeListener = /**
         * 移除编辑器事件
         */
    function (eventName) {
        if (!this.events[eventName])
            return;
        this.instance.removeListener(eventName, this.events[eventName]);
        delete this.events[eventName];
    };
    UEditorComponent.prototype.ngOnDestroy = function () {
        this.destroy();
    };
    UEditorComponent.prototype.writeValue = function (value) {
        this.value = value;
        if (this.instance) {
            this.instance.setContent(this.value);
        }
    };
    UEditorComponent.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    UEditorComponent.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    UEditorComponent.prototype.setDisabledState = function (isDisabled) {
        if (isDisabled) {
            this.instance.setDisabled();
        }
        else {
            this.instance.setEnabled();
        }
    };
    UEditorComponent.idPool = 0;
    UEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ueditor',
                    template: "\n    <textarea #host class=\"ueditor-textarea\"></textarea>\n    <p class=\"loading\" *ngIf=\"loading\">{{loadingTip}}</p>\n    ",
                    encapsulation: ViewEncapsulation.Emulated,
                    styles: [".ueditor-textarea{display:none;}"],
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return UEditorComponent; }),
                            multi: true
                        }],
                },] },
    ];
    /** @nocollapse */
    UEditorComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: NgZone, },
        { type: ScriptService, },
        { type: UEditorConfig, },
    ]; };
    UEditorComponent.propDecorators = {
        "config": [{ type: Input },],
        "loadingTip": [{ type: Input },],
        "host": [{ type: ViewChild, args: ['host',] },],
        "onPreReady": [{ type: Output },],
        "onReady": [{ type: Output },],
        "onDestroy": [{ type: Output },],
        "onContentChange": [{ type: Output },],
    };
    return UEditorComponent;
}());
export { UEditorComponent };
//# sourceMappingURL=ueditor.component.js.map
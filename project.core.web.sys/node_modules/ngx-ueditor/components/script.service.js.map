{"version":3,"file":"script.service.js","sourceRoot":"","sources":["../../.tmp/components/script.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Subject } from \"rxjs/Subject\";\r\n\r\ndeclare const document: any;\r\n\r\n@Injectable()\r\nexport class ScriptService {\r\n\r\n    private loaded: boolean = false;\r\n    private list: any = {};\r\n    private emitter: Subject<boolean> = new Subject<boolean>();\r\n\r\n    getChangeEmitter() {\r\n        return this.emitter;\r\n    }\r\n\r\n    load(path: string, debug?:boolean) {\r\n        if (this.loaded) return this;\r\n\r\n        this.loaded = true;\r\n\r\n        let promises: Promise<any>[] = [];\r\n\r\n        if (!path.endsWith('/')) path += '/';\r\n\r\n        [ `${path}ueditor.config.js`, debug === true ? `${path}ueditor.all.js` : `${path}ueditor.all.min.js` ].forEach((script) => promises.push(this.loadScript(script)));\r\n\r\n        Promise.all(promises).then(res => {\r\n            this.emitter.next(true);\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    loadScript(path: string): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.list[path] === true) {\r\n                resolve(<any>{\r\n                    path: path,\r\n                    loaded: true,\r\n                    status: 'Loaded'\r\n                });\r\n                return;\r\n            }\r\n\r\n            this.list[path] = true;\r\n\r\n            let node = document.createElement('script');\r\n            node.type = 'text/javascript';\r\n            node.src = path;\r\n            node.charset = 'utf-8';\r\n            if (node.readyState) { // IE\r\n                node.onreadystatechange = () => {\r\n                    if (node.readyState === \"loaded\" || node.readyState === \"complete\") {\r\n                        node.onreadystatechange = null;\r\n                        resolve(<any>{\r\n                            path: path,\r\n                            loaded: true,\r\n                            status: 'Loaded'\r\n                        });\r\n                    }\r\n                };\r\n            } else {\r\n                node.onload = () => {\r\n                    resolve(<any>{\r\n                        path: path,\r\n                        loaded: true,\r\n                        status: 'Loaded'\r\n                    });\r\n                };\r\n            }\r\n            node.onerror = (error: any) => resolve(<any>{\r\n                path: path,\r\n                loaded: false,\r\n                status: 'Loaded'\r\n            });\r\n            document.getElementsByTagName('head')[0].appendChild(node);\r\n        });\r\n    }\r\n}\r\n"]}
import { Injectable } from '@angular/core';
import { Subject } from "rxjs/Subject";
var ScriptService = (function () {
    function ScriptService() {
        this.loaded = false;
        this.list = {};
        this.emitter = new Subject();
    }
    ScriptService.prototype.getChangeEmitter = function () {
        return this.emitter;
    };
    ScriptService.prototype.load = function (path, debug) {
        var _this = this;
        if (this.loaded)
            return this;
        this.loaded = true;
        var promises = [];
        if (!path.endsWith('/'))
            path += '/';
        [path + "ueditor.config.js", debug === true ? path + "ueditor.all.js" : path + "ueditor.all.min.js"].forEach(function (script) { return promises.push(_this.loadScript(script)); });
        Promise.all(promises).then(function (res) {
            _this.emitter.next(true);
        });
        return this;
    };
    ScriptService.prototype.loadScript = function (path) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.list[path] === true) {
                resolve({
                    path: path,
                    loaded: true,
                    status: 'Loaded'
                });
                return;
            }
            _this.list[path] = true;
            var node = document.createElement('script');
            node.type = 'text/javascript';
            node.src = path;
            node.charset = 'utf-8';
            if (node.readyState) {
                // IE
                node.onreadystatechange = function () {
                    if (node.readyState === "loaded" || node.readyState === "complete") {
                        node.onreadystatechange = null;
                        resolve({
                            path: path,
                            loaded: true,
                            status: 'Loaded'
                        });
                    }
                };
            }
            else {
                node.onload = function () {
                    resolve({
                        path: path,
                        loaded: true,
                        status: 'Loaded'
                    });
                };
            }
            node.onerror = function (error) {
                return resolve({
                    path: path,
                    loaded: false,
                    status: 'Loaded'
                });
            };
            document.getElementsByTagName('head')[0].appendChild(node);
        });
    };
    ScriptService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ScriptService.ctorParameters = function () { return []; };
    return ScriptService;
}());
export { ScriptService };
//# sourceMappingURL=script.service.js.map